import 'package:dartz/dartz.dart';
import 'package:demo_dprofiles/src/features/AI/ai_features/data/datasources/auto_generate_datasource.dart';
import 'package:demo_dprofiles/src/features/AI/ai_features/data/models/write_cover_letter_model.dart';
import 'package:demo_dprofiles/src/features/AI/ai_features/data/models/write_interview_question_model.dart';
import 'package:demo_dprofiles/src/features/AI/ai_features/data/models/write_profile_introduction_model.dart';
import 'package:demo_dprofiles/src/features/AI/ai_features/data/models/write_skill_knowledge_model.dart';
import 'package:demo_dprofiles/src/features/AI/ai_features/domain/repositories/auto_generate_history_repository.dart';
import 'package:demo_dprofiles/src/features/auth/data/models/auth_error_response.dart';
import 'package:demo_dprofiles/src/utils/https/my_response/base_response.dart';
import 'package:dio/dio.dart';
import 'package:injectable/injectable.dart';

@Injectable(as: AutoGenerateRepository)
class AutoGenerateRepositoryImpl implements AutoGenerateRepository {
  final AutoGenerateDataSource _autoGenerateDataSource;

  AutoGenerateRepositoryImpl(this._autoGenerateDataSource);

  @override
  Future<Either<AutoGenerateFailure, BaseResponse>> getAutoGenerateHistory(
      {int? page, int? limit}) async {
    try {
      final response = await _autoGenerateDataSource.getAutoGenerateHistory(
          page: page, limit: limit);

      return Right(response);
    } on DioException catch (e) {
      return Left(AutoGenerateFailure(
          response: RegularErrorResponse.fromJson(e.response!.data)));
    }
  }

  @override
  Future<Either<AutoGenerateFailure, BaseResponse>> generateCoverLetter(
      WriteCoverLetterModel model) async {
    try {
      final response = await _autoGenerateDataSource.generateCoverLetter(model);

      return Right(response);
    } on DioException catch (e) {
      return Left(AutoGenerateFailure(
          response: RegularErrorResponse.fromJson(e.response!.data)));
    }
  }

  @override
  Future<Either<AutoGenerateFailure, BaseResponse>> generateInterviewQuestion(
      WriteInterviewQuestionModel model) async {
    try {
      final response =
          await _autoGenerateDataSource.generateInterviewQuestion(model);

      return Right(response);
    } on DioException catch (e) {
      return Left(AutoGenerateFailure(
          response: RegularErrorResponse.fromJson(e.response!.data)));
    }
  }

  @override
  Future<Either<AutoGenerateFailure, BaseResponse>> generateProfileIntroduction(
      WriteProfileIntroductionModel model) async {
    try {
      final response =
          await _autoGenerateDataSource.generateProfileIntroduction(model);

      return Right(response);
    } on DioException catch (e) {
      return Left(AutoGenerateFailure(
          response: RegularErrorResponse.fromJson(e.response!.data)));
    }
  }

  @override
  Future<Either<AutoGenerateFailure, BaseResponse>> generateSkillKnowledge(
      WriteSkillKnowledgeModel model) async {
    try {
      final response =
          await _autoGenerateDataSource.generateSkillKnowledge(model);

      return Right(response);
    } on DioException catch (e) {
      return Left(AutoGenerateFailure(
          response: RegularErrorResponse.fromJson(e.response!.data)));
    }
  }

  @override
  Future<Either<AutoGenerateFailure, BaseResponse>>
      getAutoGenerateHistoryDetail(int id) async {
    try {
      final response =
          await _autoGenerateDataSource.getAutoGenerateHistoryDetail(id);

      return Right(response);
    } on DioException catch (e) {
      return Left(AutoGenerateFailure(
          response: RegularErrorResponse.fromJson(e.response!.data)));
    }
  }
}
